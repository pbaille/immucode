#+title: Immutable coding


** <2023-01-17 Tue>
I would like the whole coding environment to be immutable

** <2023-01-19 Thu>
when adding something to the environment it is immediately compiled, self sufficiant and immutable, no references to outter env
if doing so we will have code duplications when combining existing code fragments
the best thing would be to strip the creation env to its bare minimum and copy it
or to compile to a serie of bindings and a return expression
when combining two forms we could therefore merge their bindings so there is no duplications
should we use hashes ?

** <2023-01-20 Fri>
if I do not allow env member overides, I can safely bind to a path and be sure that the value will always be the same
it seems to work well
*** todo
- [X] fn and let
- [X] recursive fn
** <2023-01-22 Sun>
the base is here: let, lambdas, macros, if, recursion
*** todo
- [X] collections
- [X] destructuration
- [X] generic functions
- [X] quasiquote
- [X] modules
- [ ] effects
** <2023-01-24 Tue>
the bind thing seems to be really powerful
because it let you return one value in its context
In previous models, some operations are stepping the environment and some others are building values
Here we do both and it yield to great flexibility
For instance, I was thinking about polymorphism, e.g generic functions
Most of the time it is not really needed because the implementation can be determined at compile time.
Any defined node in the env has the potential to 'bind' its operands as it wants
So if we keep track of the types of the nodes, a particular call can be compiled to the good implementation.
Types can be represented as nodes too, those nodes could hold some kind of prototype if we want
but it seems quite limitating, generic functions could hold their dispatches for greater flexibility
we are not limited to first argument dispatch this way.
*** types
**** basic edn types
- booleans
- keywords
- symbols
- numbers
- strings
- vectors
- maps
- sets
- lists
**** inference
- functions nodes are responsible to determine the type of their return value on a call basis
- when used as value, functions nodes can be asked by the function consuming it to provide type informations
- we will have to give the system some informations about external functions
- when no type information is known about an operand, the operator can provide it
- we will be able to throw on type inconstitencies
** <2023-01-27 Fri>
almost here
*** primitives
define a set of functions that have to be here on the host plateform
It should also be able to provide type informations for the inference macanism
*** dispatch
**** runtime
- [X] bring back =question-mark= macro code
**** compile-time
- [X] the =multi-fn.simple= bind function let you choose a dispatch at bind time
- a chain of binding functins that can fail returning nil could be handy too
** <2023-01-29 Sun>
*** destructuration and bindings
- top level destructuration (in =bind=) ??
- [X] destructured bindings are processed by the =destructure/bindings= function
  a flat vector of bindings is returned, therfore we are losing track of the actual pattern
  it should be valuable to keep track of it for source-mapping (debug or error throwing)
  at bind time time, the evaluate mode can be used by unquoting some expressions, it can serve as a quick way to debug some expression.
- [X] =let1= ?? to handle destructuration. =let= bindings will be hold in env indexed.
** <2023-01-30 Mon>
*** binding if
sometimes test result can be determined at bind time and a branch can be selected
as a simple exemple: if the test is =(vector? x)= and x is known to be a vector, the else branch is discarded at bind time
bind time dispatch can be realised this way maybe (=multi-fn.simple=)
*** types
should try to add some simply typed functions that will be able to throw meaningful bind time error
will begin with some commonly used clojure functions.
type system will be quite complicated since it implies some kind of chain reaction
if one node refine the type of its parent this information has to be forwarded to nodes that depend on the parent that can refine it back etc...
we will have to find the fixpoint of the type refinement propagation

Does the binders have to keep track of all nodes that were bound by it ?
** <2023-01-31 Tue>
There is an inconstitency in the usage of the =:return= key between lambda and let
*** todo
 - [X] lambda bind should return a binding node
 - [X] let should hold a =:link= key to its return expression
 - [X] build should be a node method like bind and evaluate
 - [X] external symbols could declared instead of being resolved in bind (because clojure should not be assumed as the host)
 - [X] locals are treated differently in bind, is it really necessary ?
 - [X] application binding (forms from which the first member is not a binder) could have their builtin binder (that handle the composite expansion)

- [X] refactoring

   (a method is a tree node entry like =:bind=)

   - build -> =:compile= method (stored as =:compiled=)
   - evaluate(2,3) -> =:interpret= method (results could be stored in an =:output= hash-map)
   - evaluate(1) -> =:evaluate= method (stored as =:value=)
   - =:deps= node field computed at bind time

   this will result in smaller base functions (=bind= =evaluate= =build=)

*** mmmm
interpret and build should return environments too
this way we can store results in the envs while eventually altering it
in build it seems nice to keep track of dependencies and get rid of build-state

** <2023-02-02 Thu>
the refactoring is almost done
the env returning versions of interpret and build have been abandonned
*** todo
- [X] remove the sort-by str from tree/children
  further sorting or filtering will be done via the :name key
- [X] dedicated keys of the tree ns should be namespaced in order to avoid conflicts (it uses a :name key...)
- [X] handle sequential nodes children differently (in s-expr and if)
  because it can introduce some weird behavior when for some reason an indexed node contains other bindings
*** types again
in the =if= form (which is used for shorcircuiting bindings in =let=) the test expression can provide type refinements to its branches
how a type refinement should be propagated ?

Does each node has to keep track of all its dependincies in order to propagate type refinement easily ?
A node can propagate to its children easily (via a method call ?)

**** DONE deps method refactoring
the deps method compute transitive deps
maybe we should have a direct deps mecanism, should be better to propagate efficiently
the deps method could be changed to only direct deps
the transitive thing would be done in compile and it would simplify deps method implementations

** <2023-02-03 Fri>
*** type inference
=:refine= method
node unification on lambda application
applied lambda is like let
a let is a seq of bindings
each binding can result in a refinement
** <2023-02-08 Wed>
=xp/types2.clj= is going well
*** further steps
**** difference ?
a type constructor that excludes some elements could be nice
maybe just a =not= type (negation) in conjunction to a composition type
**** type transitions
a function can be typed with a type transition
**** comparing types
several possibilities
- equal
- distinct
- bigger
- smaller
- overlap
** <2023-02-21 Tue>
=types3.clj= implements comparison and negation along previous things.
The comparison of intersection types is tricky and the implementation is incomplete.
** <2023-03-11 Sat>
introduction of predicates for primitives
e.g =keyword?=, =number?=
that can be use as binding pattern and contribute to compile time typechecking
=(fn [(number? x) (number? y)] (+ x y))=
but how to type the return value ?
the Carp language uses the =the= verb to give type hint
=(the number (+ x y))=
this simple add function could be written in several ways

#+begin_src clojure
(fn [x y]
  (and (the number x)
       (the number y)
       (the number (+ x y))))

(fn [(the number x)
    (the number y)]
  (the number (+ x y)))

(fn [(number? x) (number? y)]
  (the number (+ x y)))

(fn [(:- x number)
    (:- y number)]
  (the number (+ x y)))

(fn [(T x number)
    (T y number)]
  (the number (+ x y)))

(fn [(is x number)
    (is y number)]
  (the number (+ x y)))
#+end_src
** <2023-07-09 Sun>
reprise after long break
still need to think about type propagation
types ns is kind of useful, have to wire it properly into core
*** do we really need =bubling-void= ?
maybe the parent should be in charge to handle the refinement of its children
we should still need some kind of reaction for the case a child is refined externally

*** DONE typed functions
for now functions are regular value that gets build an applied when found in verb position
typed functions need actually to do some work at bind time
for this, function instances should expose a bind method
see [[file:core.clj::(tree/put '\[types annotate\]][types.annotate]]

*** TODO refinement bubbling
Parent should maybe install listeners on their childs for when they are refined.
The bubbling-void stuff should go away now.
** <2023-07-17 Mon>
*** some types of primitive nodes could hold a link to their return node
Nodes like let or lambda relies on their build method + a return child node to be compiled
This kind of 'scope' node should hold a :link to their return node and maybe defer (some) methods to it?
The issue with the current way of handling this kind of node is that it do not work well with void bubbling.
This kind of forward linkage could also result in stack overflows...
** <2023-07-20 Thu>
*** scope nodes
those nodes who holds a =__return__= child are quite common. they maybe deserve a special top level key.
How about =:return= ?
If a node is s scope, where should we put its type ?
on the =__return__= child ? probably not.
this return child could be a special kind of node that defer everything to its parent...
